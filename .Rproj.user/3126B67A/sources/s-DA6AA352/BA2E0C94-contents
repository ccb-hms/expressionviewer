library(shiny)
library(celldex)
library(ggplot2)
library(RColorBrewer)
#library(SGSeq)
#library(GenomicFeatures)
#library(biomaRt)                                                                                                                   


#Download data
bluePrintEncode <- celldex::BlueprintEncodeData()
dice <- celldex::DatabaseImmuneCellExpressionData()
hPCA <- celldex::HumanPrimaryCellAtlasData()
mID <- celldex::MonacoImmuneData()

autocompletelist <- c(unique(rownames(bluePrintEncode),
                             rownames(dice),
                             rownames(hPCA),
                             rownames(mID),
                             fromLast = FALSE))
autocompletelist <- sort(autocompletelist)

counts <- list(bluePrintEncode, dice, hPCA, mID)
names(counts) <- c("bluePrintEncode", "dice", "hPCA", "mID")
printNames <- c("Blueprint/ENCODE",
                "Database Immune Cell Expression (DICE)",
                "Human Primary Cell Atlas (HPCA)",
                "Monaco Immune Data (MID)")


#Prepare sgseq item
##read in sgseq heatmap object
#sgfc <- readRDS("ccb/expView/analyzedSGSeq.RDS")

ExpressionViewer <- function(experimentList = counts, printNames = experNames,
                             metaNames = "label.main", sgSeq = df, seqStyle = "NCBI"){
    #naming experiment list
    inputOps <- names(experimentList)
    names(inputOps) <- printNames
    inputOps <- as.list(inputOps)
    
    #Map gene ids to gene symbols
    #listMarts()                                                                                                                           
    #ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")                                                                         
    #filters = listFilters(ensembl)                                                                                                        
    #entrezgene = unique(sgSeq@rowRanges@geneID)
    #genes <- getBM(filters="entrezgene_id",
    #               attributes=c("hgnc_symbol","entrezgene_id"),
    #               values=entrezgene, mart=ensembl)                                                                                                                 
    
    
    #Checking if metaNames are present in all experiments
    colList <- lapply(experimentList, function(x){colnames(colData(x))})
    present <- vapply(colList, function(x){metaNames %in% x}, logical(1))
    stopifnot(all(present))
    
    #user input and page layout specification
    ui <- fluidPage(
        titlePanel("Human Immune Expression Viewer:"),
        sidebarLayout(
            sidebarPanel(
                selectInput(inputId = "dataset", "Dataset/Experiment:",
                            choices = inputOps, selectize = TRUE),
                br(),
                selectizeInput(inputId = "genename", label = "Gene Name:",
                               multiple = FALSE, selected = autocompletelist[1], 
                               choices = autocompletelist),
                uiOutput("tab")
            ),
            mainPanel(
                plotOutput(outputId = "box", width = "100%"), position = "right",
                br(),
                plotOutput(outputId = "heat", width = "100%"), position = "right"
            )
        )
    )
    
    
    #server output/plotting specifications
    server <- function(input, output){
        getPalette <- colorRampPalette(rev(brewer.pal(9, "Spectral")))
        #Expression Viewer boxplot
        output$box <- renderPlot({
            se_index <- which(names(experimentList) == input$dataset)
            se <- experimentList[[se_index]]
            labelData <- which(names(colData(se)) %in% metaNames)
            n <- length(unique(colData(se)[,labelData]))
            cellTypeSplit <- split(x = assay(se)[input$genename,], f = colData(se)[,labelData])
            test <- names(sort(unlist(lapply(cellTypeSplit, FUN = median))))
            colData(se)[,labelData] <- factor(colData(se)[,labelData] , levels=test)
            par(mai = c(0.8,2.3,0.2,0.2))
            boxplot(formula = assay(se)[input$genename,] ~ colData(se)[,labelData],
                    data = assay(se),
                    main = input$genename,
                    xlab = "Log Expression (TPM)",
                    ylab = "",
                    cex.axis = 0.8,
                    horizontal = TRUE,
                    xlim = c(0,n+1),
                    col = getPalette(n),
                    las = 1)
            rect(xleft = min(assay(se)[input$genename,]),
                 xright = max(assay(se)[input$genename,]),
                 ybottom = seq(-0.5, n-.5),
                 ytop = seq(0.5, n+.5),
                 col= c(NA, rgb(.78,.89,1, alpha = 0.25)),
                 border = NA)
            height = 150
        })
        
        #SGSeq Heatmap
        #output$heat <- renderPlot({
        #    SGSeq::plotFeatures(sgSeq,
        #                        geneID = genes[which(genes$hgnc_symbol == input$genename),2])
        #})
        
        #Reference link
        url <- a("Aran D, Looney AP,...,Bhattacharya M (2019). “Reference-based
                  analysis of lung single-cell sequencing reveals a transitional
                  profibrotic macrophage.” Nat. Immunol., 20, 163-172.
                 doi: 10.1038/s41590-018-0276-y.xperiment/html/celldex.html",
                 href = "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6340744/")
        output$tab <- renderUI({
            tagList("Reference Link:", url)
        })
    }
    shinyApp(ui = ui, server = server)
}

#Call function
ExpressionViewer(experimentList = counts, printNames = printNames)

