ExpressionViewer(experimentList = counts, printNames = printNames)
#Call function
ExpressionViewer(experimentList = counts, printNames = printNames)
#Call function
ExpressionViewer(experimentList = counts, printNames = printNames)
#Call function
ExpressionViewer(experimentList = counts, printNames = printNames)
option(repos)
options('repos')
options('repos')
local({
r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
r["BioCsoft"] <- "https://bioconductor.org/packages/3.12/bioc"
r["BioCann"] <- "https://bioconductor.org/packages/3.12/data/annotation"
r["BioCexp"] <- "https://bioconductor.org/packages/3.12/data/experiment"
r["BioCworkflows"] <- "https://bioconductor.org/packages/3.12/workflows"
options(repos = r)
})
options('repos')
library(shiny)
library(celldex)
library(ggplot2)
library(RColorBrewer)
library(SGSeq)
library(GenomicFeatures)
library(biomaRt)
#Download data
sgbioplex <- readRDS("ccb/expView/analyzedSGSeq.RDS")
rownames(colData(sgbioplex)) <- c("wt_89", "wt_90", "wt_91",
"-NSUN2_92", "-NSUN2_93", "-NSUN2_94")
colData(sgbioplex)[,1] <- c("Wildtype", "Wildtype", "Wildtype",
"-NSUN2","-NSUN2","-NSUN2")
ExpressionViewer <- function(experimentList = counts,
metaNames = "geneID", seqStyle = "NCBI"){
#Map gene ids to gene symbols
listMarts()
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters = listFilters(ensembl)
entrezgene = unique(experimentList@rowRanges@geneID)
genes <- getBM(filters="entrezgene_id",
attributes=c("hgnc_symbol","entrezgene_id"),
values=entrezgene, mart=ensembl)
#user input and page layout specification
ui <- fluidPage(
titlePanel("Bioplex Expression/Splicing Viewer:"),
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "genename", label = "Gene Name:",
multiple = FALSE, selected = genes[7,1],
choices = genes[,1]),
uiOutput("tab")
),
mainPanel(
plotOutput(outputId = "box", width = "100%"), position = "right",
br(),
plotOutput(outputId = "heat", width = "100%"), position = "right"
)
)
)
#server output/plotting specifications
server <- function(input, output){
getPalette <- colorRampPalette(rev(brewer.pal(9, "Spectral")))
#Expression Viewer boxplot
output$box <- renderPlot({
se <- experimentList
cellTypeSplit <- split(x = assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],], f = colData(se)[,1])
test <- names(sort(unlist(lapply(cellTypeSplit, FUN = median))))
colData(se)[,1] <- list(factor(colData(se)[,1] , levels=test))
par(mai = c(0.4,2,0.2,0.5))
boxplot(formula = assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],] ~ colData(se)[,1],
data = assay(se),
main = input$genename,
xlab = "Log Expression (TPM)",
ylab = "",
cex.axis = 0.8,
horizontal = TRUE,
xlim = c(0,2+1),
col = getPalette(2),
las = 1)
rect(xleft = min(assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],]),
xright = max(assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],]),
ybottom = seq(-0.5, 2-.5),
ytop = seq(0.5, 2+.5),
col= c(NA, rgb(.78,.89,1, alpha = 0.25)),
border = NA)
height = 150
})
#SGSeq Heatmap
output$heat <- renderPlot({
SGSeq::plotFeatures(experimentList,
geneID = genes[which(genes$hgnc_symbol == input$genename),2])
})
#Reference link
url <- a("Sun Z, Xue S, Xu H, Hu X, Chen S, Yang Z, Yang Y, Ouyang J,
Cui H. Effects of NSUN2 deficiency on the mRNA 5-methylcytosine
modification and gene expression profile in HEK293 cells.
Epigenomics. 2019 Feb;11(4):439-453. doi: 10.2217/epi-2018-0169.
Epub 2018 Dec 11. PMID: 30526041.",
href = "https://pubmed.ncbi.nlm.nih.gov/30526041/")
output$tab <- renderUI({
tagList("Reference Link:", url)
})
}
shinyApp(ui = ui, server = server)
}
#Call function
ExpressionViewer(experimentList = sgbioplex)
getwd()
#read in desired bams
files <- as.list(list.files("ccb/expView", pattern = "rem"))
#read in desired bams
files <- as.list(list.files("ccb/expView/bioplexbams/", pattern = "rem"))
View(files)
paths <- paste0("ccb/expView/",files)
paths <- paste0("ccb/expView/bioplexbams/",files)
alignedReads <- lapply(bamPaths, countBam)
library(Rsamtools)
library(SGSeq)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(AnnotationHub)
library(Rsubread)
alignedReads <- lapply(bamPaths, countBam)
#calculate number of aligned reads
alignedCounts <- list()
for(i in 1:length(alignedReads)){
alignedCounts[i] <- alignedReads[[i]]$records
}
alignedCounts <- unlist(alignedCounts)
#make df of aligned and total reads
sampleNames <- lapply(files, strsplit, "Aligned")
for(i in 1:length(sampleNames)){
sampleNames[[i]] <- sampleNames[[i]][[1]][1]
}
View(sampleNames)
#reads <- t(data.frame(sampleNames[-c(2,5,8,11,14,17)]))
reads <- as.data.frame(reads)
colnames(reads) <- "sample"
reads$totalReads <- c(50113273, 51025077, 55578364,
55985951,57970846, 59817973)
reads <- t(data.frame(sampleNames))
reads <- as.data.frame(reads)
colnames(reads) <- "sample"
reads$totalReads <- c(50113273, 51025077, 55578364,
55985951,57970846, 59817973)
reads$totalReads <- (reads$totalReads)*2
reads$alignedReads <- alignedCounts
reads$percAligned <- ((reads$alignedReads)/(reads$totalReads))*100
reads$alignedBy <- c("Coord", "Transcriptome")
alignedReads <- lapply(bamPaths, countBam)
alignedReads <- lapply(paths, countBam)
#calculate number of aligned reads
alignedCounts <- list()
for(i in 1:length(alignedReads)){
alignedCounts[i] <- alignedReads[[i]]$records
}
alignedCounts <- unlist(alignedCounts)
#make df of aligned and total reads
sampleNames <- lapply(files, strsplit, "Aligned")
for(i in 1:length(sampleNames)){
sampleNames[[i]] <- sampleNames[[i]][[1]][1]
}
reads <- t(data.frame(sampleNames))
reads <- as.data.frame(reads)
colnames(reads) <- "sample"
reads$totalReads <- c(50113273, 51025077, 55578364,
55985951,57970846, 59817973)
reads$totalReads <- (reads$totalReads)*2
reads$alignedReads <- alignedCounts
reads$percAligned <- ((reads$alignedReads)/(reads$totalReads))*100
#reads$alignedBy <- c("Coord", "Transcriptome")
View(reads)
#Make data frame for sgseq input
sg_data <- as.data.frame(reads$sample)
colnames(sg_data) <- "sample_name"
sg_data$file_bam <- paths
sg_data$paired_end <- TRUE
sg_data$read_length <- 300
sg_data$frag_length <- 360
sg_data$lib_size <- reads$alignedReads
rownames(sg_data) <- NULL
#Annotate data and make splicing heatmap
ah <- AnnotationHub()
#q <- query(ah, c("gtf", "hg19", "Homo sapiens"))
txdb <- ah[["AH75188"]]
txf <- convertToTxFeatures(txdb)
seqlevels(txf) <- c("1","2","3","4","5","6","7","8","9","10","11","12","13",
"14","15","16","17","18","19","20","21","22","X","Y",
"MT")
sgfc <- analyzeFeatures(sg_data, features = txf)
tx_pic <- plotFeatures(sgfc, geneID = 975)
#saveRDS(sgfc, file = "ccb/expView/analyzedSGSeq.RDS")
library(biomaRt)
listMarts()
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters = listFilters(ensembl)
entrezgene = unique(sgfc@rowRanges@geneID)
genes <- getBM(filters="entrezgene_id", attributes=c("hgnc_symbol","entrezgene_id"), values=entrezgene, mart=ensembl)
print(genes)
#calculate number of aligned reads
alignedCounts <- list()
for(i in 1:length(alignedReads)){
alignedCounts[i] <- alignedReads[[i]]$records
}
alignedCounts <- unlist(alignedCounts)
#make df of aligned and total reads
sampleNames <- lapply(files, strsplit, "Aligned")
for(i in 1:length(sampleNames)){
sampleNames[[i]] <- sampleNames[[i]][[1]][1]
}
reads <- t(data.frame(sampleNames))
reads <- as.data.frame(reads)
colnames(reads) <- "sample"
reads$totalReads <- c(50113273, 51025077, 55578364,
55985951,57970846, 59817973)
reads$totalReads <- (reads$totalReads)*2
reads$alignedReads <- alignedCounts
reads$percAligned <- ((reads$alignedReads)/(reads$totalReads))*100
#reads$alignedBy <- c("Coord", "Transcriptome")
View(reads)
#Make data frame for sgseq input
sg_data <- as.data.frame(reads$sample)
colnames(sg_data) <- "sample_name"
sg_data$file_bam <- paths
sg_data$paired_end <- TRUE
sg_data$read_length <- 300
sg_data$frag_length <- 360
sg_data$lib_size <- reads$alignedReads
rownames(sg_data) <- NULL
#Annotate data and make splicing heatmap
ah <- AnnotationHub()
#q <- query(ah, c("gtf", "hg19", "Homo sapiens"))
txdb <- ah[["AH75188"]]
txf <- convertToTxFeatures(txdb)
seqlevels(txf) <- c("1","2","3","4","5","6","7","8","9","10","11","12","13",
"14","15","16","17","18","19","20","21","22","X","Y",
"MT")
sgfc <- analyzeFeatures(sg_data, features = txf)
tx_pic <- plotFeatures(sgfc, geneID = 975)
#saveRDS(sgfc, file = "ccb/expView/analyzedSGSeq.RDS")
library(biomaRt)
listMarts()
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters = listFilters(ensembl)
entrezgene = unique(sgfc@rowRanges@geneID)
genes <- getBM(filters="entrezgene_id", attributes=c("hgnc_symbol","entrezgene_id"), values=entrezgene, mart=ensembl)
print(genes)
#read in desired bams
files <- as.list(list.files("ccb/expView/bioplexbams/", pattern = "rem"))
paths <- paste0("ccb/expView/bioplexbams/",files)
#bamPaths <- paths[-c(2,5,8,11,14,17)]
alignedReads <- lapply(paths, countBam)
#calculate number of aligned reads
alignedCounts <- list()
for(i in 1:length(alignedReads)){
alignedCounts[i] <- alignedReads[[i]]$records
}
alignedCounts <- unlist(alignedCounts)
#make df of aligned and total reads
sampleNames <- lapply(files, strsplit, "Aligned")
for(i in 1:length(sampleNames)){
sampleNames[[i]] <- sampleNames[[i]][[1]][1]
}
reads <- t(data.frame(sampleNames))
reads <- as.data.frame(reads)
colnames(reads) <- "sample"
reads$totalReads <- c(50113273, 51025077, 55578364,
55985951,57970846, 59817973)
reads$totalReads <- (reads$totalReads)*2
reads$alignedReads <- alignedCounts
reads$percAligned <- ((reads$alignedReads)/(reads$totalReads))*100
#reads$alignedBy <- c("Coord", "Transcriptome")
View(reads)
#Make data frame for sgseq input
sg_data <- as.data.frame(reads$sample)
colnames(sg_data) <- "sample_name"
sg_data$file_bam <- paths
sg_data$paired_end <- TRUE
sg_data$read_length <- 300
sg_data$frag_length <- 360
sg_data$lib_size <- reads$alignedReads
rownames(sg_data) <- NULL
#Annotate data and make splicing heatmap
ah <- AnnotationHub()
#q <- query(ah, c("gtf", "hg19", "Homo sapiens"))
txdb <- ah[["AH75188"]]
txf <- convertToTxFeatures(txdb)
seqlevels(txf) <- c("1","2","3","4","5","6","7","8","9","10","11","12","13",
"14","15","16","17","18","19","20","21","22","X","Y",
"MT")
sgfc <- analyzeFeatures(sg_data, features = txf)
tx_pic <- plotFeatures(sgfc, geneID = 975)
#saveRDS(sgfc, file = "ccb/expView/analyzedSGSeq.RDS")
library(biomaRt)
listMarts()
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters = listFilters(ensembl)
entrezgene = unique(sgfc@rowRanges@geneID)
genes <- getBM(filters="entrezgene_id", attributes=c("hgnc_symbol","entrezgene_id"), values=entrezgene, mart=ensembl)
print(genes)
sgfc <- analyzeFeatures(sg_data, features = txf)
tx_pic <- plotFeatures(sgfc, geneID = 975)
View(sg_data)
sg_data <- sg_data[c(1,3,5,7,9,11),]
View(sg_data)
sg_data$file_bam
sgfc <- analyzeFeatures(sg_data, features = txf)
tx_pic <- plotFeatures(sgfc, geneID = 975)
saveRDS(sgfc, file = "ccb/expView/remdupanalyzedSGSeq.RDS")
#Download data
sgbioplex <- readRDS("ccb/expView/remdupanalyzedSGSeq.RDS")
library(shiny)
library(celldex)
library(ggplot2)
library(RColorBrewer)
library(SGSeq)
library(GenomicFeatures)
library(biomaRt)
#Download data
sgbioplex <- readRDS("ccb/expView/remdupanalyzedSGSeq.RDS")
rownames(colData(sgbioplex)) <- c("wt_89", "wt_90", "wt_91",
"-NSUN2_92", "-NSUN2_93", "-NSUN2_94")
colData(sgbioplex)[,1] <- c("Wildtype", "Wildtype", "Wildtype",
"-NSUN2","-NSUN2","-NSUN2")
ExpressionViewer <- function(experimentList = counts,
metaNames = "geneID", seqStyle = "NCBI"){
#Map gene ids to gene symbols
listMarts()
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters = listFilters(ensembl)
entrezgene = unique(experimentList@rowRanges@geneID)
genes <- getBM(filters="entrezgene_id",
attributes=c("hgnc_symbol","entrezgene_id"),
values=entrezgene, mart=ensembl)
#user input and page layout specification
ui <- fluidPage(
titlePanel("Bioplex Expression/Splicing Viewer:"),
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "genename", label = "Gene Name:",
multiple = FALSE, selected = genes[7,1],
choices = genes[,1]),
uiOutput("tab")
),
mainPanel(
plotOutput(outputId = "box", width = "100%"), position = "right",
br(),
plotOutput(outputId = "heat", width = "100%"), position = "right"
)
)
)
#server output/plotting specifications
server <- function(input, output){
getPalette <- colorRampPalette(rev(brewer.pal(9, "Spectral")))
#Expression Viewer boxplot
output$box <- renderPlot({
se <- experimentList
cellTypeSplit <- split(x = assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],], f = colData(se)[,1])
test <- names(sort(unlist(lapply(cellTypeSplit, FUN = median))))
colData(se)[,1] <- list(factor(colData(se)[,1] , levels=test))
par(mai = c(0.4,2,0.2,0.5))
boxplot(formula = assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],] ~ colData(se)[,1],
data = assay(se),
main = input$genename,
xlab = "Log Expression (TPM)",
ylab = "",
cex.axis = 0.8,
horizontal = TRUE,
xlim = c(0,2+1),
col = getPalette(2),
las = 1)
rect(xleft = min(assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],]),
xright = max(assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],]),
ybottom = seq(-0.5, 2-.5),
ytop = seq(0.5, 2+.5),
col= c(NA, rgb(.78,.89,1, alpha = 0.25)),
border = NA)
height = 150
})
#SGSeq Heatmap
output$heat <- renderPlot({
SGSeq::plotFeatures(experimentList,
geneID = genes[which(genes$hgnc_symbol == input$genename),2])
})
#Reference link
url <- a("Sun Z, Xue S, Xu H, Hu X, Chen S, Yang Z, Yang Y, Ouyang J,
Cui H. Effects of NSUN2 deficiency on the mRNA 5-methylcytosine
modification and gene expression profile in HEK293 cells.
Epigenomics. 2019 Feb;11(4):439-453. doi: 10.2217/epi-2018-0169.
Epub 2018 Dec 11. PMID: 30526041.",
href = "https://pubmed.ncbi.nlm.nih.gov/30526041/")
output$tab <- renderUI({
tagList("Reference Link:", url)
})
}
shinyApp(ui = ui, server = server)
}
#Call function
ExpressionViewer(experimentList = sgbioplex)
library(shiny)
library(celldex)
library(ggplot2)
library(RColorBrewer)
library(SGSeq)
library(GenomicFeatures)
library(biomaRt)
#Download data
sgbioplex <- readRDS("ccb/expView/remdupanalyzedSGSeq.RDS")
rownames(colData(sgbioplex)) <- c("wt_89", "wt_90", "wt_91",
"-NSUN2_92", "-NSUN2_93", "-NSUN2_94")
colData(sgbioplex)[,1] <- c("Wildtype", "Wildtype", "Wildtype",
"-NSUN2","-NSUN2","-NSUN2")
ExpressionViewer <- function(experimentList = counts,
metaNames = "geneID", seqStyle = "NCBI"){
#Map gene ids to gene symbols
listMarts()
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters = listFilters(ensembl)
entrezgene = unique(experimentList@rowRanges@geneID)
genes <- getBM(filters="entrezgene_id",
attributes=c("hgnc_symbol","entrezgene_id"),
values=entrezgene, mart=ensembl)
#user input and page layout specification
ui <- fluidPage(
titlePanel("Bioplex Expression/Splicing Viewer:"),
sidebarLayout(
sidebarPanel(
selectizeInput(inputId = "genename", label = "Gene Name:",
multiple = FALSE, selected = genes[7,1],
choices = genes[,1]),
uiOutput("tab")
),
mainPanel(
plotOutput(outputId = "box", width = "100%"), position = "right",
br(),
plotOutput(outputId = "heat", width = "100%"), position = "right"
)
)
)
#server output/plotting specifications
server <- function(input, output){
getPalette <- colorRampPalette(rev(brewer.pal(9, "Spectral")))
#Expression Viewer boxplot
output$box <- renderPlot({
se <- experimentList
cellTypeSplit <- split(x = assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],], f = colData(se)[,1])
test <- names(sort(unlist(lapply(cellTypeSplit, FUN = median))))
colData(se)[,1] <- list(factor(colData(se)[,1] , levels=test))
par(mai = c(0.4,2,0.2,0.5))
boxplot(formula = assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],] ~ colData(se)[,1],
data = assay(se),
main = input$genename,
xlab = "Log Expression (TPM)",
ylab = "",
cex.axis = 0.8,
horizontal = TRUE,
xlim = c(0,2+1),
col = getPalette(2),
las = 1)
rect(xleft = min(assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],]),
xright = max(assay(se)[genes[which(genes$hgnc_symbol == input$genename),2],]),
ybottom = seq(-0.5, 2-.5),
ytop = seq(0.5, 2+.5),
col= c(NA, rgb(.78,.89,1, alpha = 0.25)),
border = NA)
height = 150
})
#SGSeq Heatmap
output$heat <- renderPlot({
SGSeq::plotFeatures(experimentList,
geneID = genes[which(genes$hgnc_symbol == input$genename),2])
})
#Reference link
url <- a("Sun Z, Xue S, Xu H, Hu X, Chen S, Yang Z, Yang Y, Ouyang J,
Cui H. Effects of NSUN2 deficiency on the mRNA 5-methylcytosine
modification and gene expression profile in HEK293 cells.
Epigenomics. 2019 Feb;11(4):439-453. doi: 10.2217/epi-2018-0169.
Epub 2018 Dec 11. PMID: 30526041.",
href = "https://pubmed.ncbi.nlm.nih.gov/30526041/")
output$tab <- renderUI({
tagList("Reference Link:", url)
})
}
shinyApp(ui = ui, server = server)
}
#Call function
ExpressionViewer(experimentList = sgbioplex)
options('repos')
local({
r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
r["BioCsoft"] <- "https://bioconductor.org/packages/3.12/bioc"
r["BioCann"] <- "https://bioconductor.org/packages/3.12/data/annotation"
r["BioCexp"] <- "https://bioconductor.org/packages/3.12/data/experiment"
r["BioCworkflows"] <- "https://bioconductor.org/packages/3.12/workflows"
options(repos = r)
})
library(devtools)
build_vignettes()
build_vignettes(pkg = "expressionviewer/")
getwd()
setwd("/Users/vmuckerson/ccb/packages/expressionviewer/")
build_vignettes()
build_vignettes("R/humanImmuneExpViewer.R")
build_vignettes("R")
build_vignettes("R/")
library(knitr)
build_vignettes("R/")
build_vignettes()
build_vignettes()
library(devtools)
build_vignettes()
